1. { Definisi ADT Lingkaran }

Use Point

TYPE Lingkaran : < Pusat: Point, { titik pusat lingkaran }
		    R: real { jari-jari lingkaran }
constant Pi : real = 3.14

{ PRIMITIF }

{ KONSTRUKTOR }
function MakeLingkaran (P: Point, R: real) -> Lingkaran
{ Membentuk sebuah lingkaran dari komponen-komponennya }

{ SELEKTOR }
function GetPusat (L: Lingkaran) -> Point
{ Mengirimkan titik pusat lingkaran }
function GetRadius (L: Lingkaran) -> real
{ Mengirimkan jari-jari lingkaran }
procedure SetPusat (input/output L: Lingkaran, input P: Point) 
{ I.S. L, P terdefinisi, F.S. Terbentuk lingkaran dengan pusat baru P }
procedure SetRadius (input/output L: Lingkaran, input R: real)
{ I.S. L, R terdefinisi, F.S. Terbentuk lingkaran dengan radius baru R }



2. 
function IsIntersect (L1: Lingkaran, L2: Lingkaran) → boolean 
	if (Jarak(L1.Pusat, L2.Pusat) <= (L1.R + L2.R)) then
		-> true
	else
		-> false

function HitungLuas (L: Lingkaran) → real 
	-> (L.R * L.R * Pi)




3. 
{ membaca dan deklarasi variabel }
input (x1, y1, r1, x2, y2, r2)
P1 <- MakePoint (x1, y1)
P2 <- MakePoint (x2, y2)
L1 <- MakeLingkaran (P1, r1)
L2 <- MakeLingkaran (P2, r2)

{ menghitung dan menampilkan jarak titik tengah }
distance <- Jarak(L1.Pusat, L2.Pusat)
output(distance)

{ menghitung dan menampilkan luas lingkaran }
area1 <- HitungLuas(L1)
area2 <- HitungLuas(L2)
output(area1, area2)

{ memeriksa apakah kedua lingkaran beririsan dan menampilkan hasilnya }
jawaban <- IsIntersect(L1, L2)
output(jawaban)



4. 
procedure InsertAt (input/output L: List, input idx: IdxType, input value: ElType)
	if (idx = (L.FirstIdx - 1)) then
		L.FirstIdx <- idx
		InsertFirst(L, value)
	else if (idx = (L.FirstIdx + L.Neff)) then
		L.Neff <- L.Neff + 1
		InsertLast(L, value)
	else
		i traversal [(L.FirstIdx + L.Neff)...(Idx+1)]
			Get(L, i) <- Get(L, (i-1))
		Set(L, idx, value)

function IsFull (L: List) → boolean
	-> (L.Neff = NMax)






5. 
procedure Unique(input/output L: List)
	i traversal [L.FirstIdx...L.FirstIdx + L.Neff - 2]
		j traversal[i+1 ... L.FirstIdx + L.Neff - 1]
			if (Get(L, j) = Get(L, i)) then
				DeleteAt(L, j)



6. 
function IsSorted(L: List) → boolean
	sort <- true
	i <- L.FirstIdx
	{ terurut membesar }
	if (Get(L, i) <= Get(L, i+1)) then
		while (i < (L.FirstIdx + L.Neff - 1) and sort) do
			if (Get(L, i) > Get(L, i+1)) then
				sort <- false
			i <- i + 1
	{ terurut mengecil }
	else if (Get(L, i) >= Get(L, i+1)) then
		while (i < (L.FirstIdx + L.Neff - 1) and sort) do
			if (Get(L, i) < Get(L, i+1)) then
				sort <- false
			i <- i + 1
 	-> sort